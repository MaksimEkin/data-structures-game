{"version":3,"sources":["logo.svg","Components/Navigation.js","Components/Header.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","menu","menuMask","useState","showMenu","setShowMenu","className","href","onClick","icon","faBars","Header","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,8GCoD5BC,MAhDf,WAAqB,IAMbC,EACAC,EAPa,EAIeC,oBAAS,GAJxB,mBAIVC,EAJU,KAIAC,EAJA,KAkCjB,OA1BGD,IACCH,EAAM,yBACNK,UAAU,yDAEV,6BACE,oCACA,wBAAIA,UAAU,cACZ,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,eAAR,eACJ,4BAAI,uBAAGA,KAAK,UAAR,YAEN,yBAAKD,UAAU,aAIjB,kBAAC,EAAD,OAGAJ,EACA,yBAAKI,UAAU,sDACXE,QAAS,kBAAMH,GAAY,OAO/B,6BACI,8BACI,kBAAC,IAAD,CAAiBC,UAAU,WAC3BG,KAAMC,IACNF,QAAS,kBAAMH,GAAaD,OAG/BF,EACAD,ICjCEU,MAVf,WACI,OACI,4BAAQL,UAAU,8EAAlB,uBAIA,kBAAC,EAAD,QCCOM,MARf,WACI,OACI,4BAAQN,UAAU,gBCaXO,MAZf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAEZ,kBAAC,EAAD,SCCQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c20441e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\nimport Home from './Home'\nfunction Navigation(){\n    //react hook to click and expand/minimize menu\n    //conditional rendering:show html only when state is true\n    \n    const [showMenu, setShowMenu] = useState(false)\n    //MENU initialized to null\n    let menu\n    let menuMask\n    if(showMenu){\n        menu= <div\n        className=\"fixed bg-white top-0 right-0 w-1/5 h-full z-50 shadow\"\n        > \n        <div>\n          <h1>MENU</h1>\n          <ul className=\"Navigation\">\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/game_board\">Game Board</a></li>\n            <li><a href=\"/login\">Log In</a></li>\n          </ul>\n          <div className=\"content\">\n             \n          </div>\n        </div>\n        <Home /> \n        </div>\n        \n        menuMask=\n        <div className=\"bg-black-t-50 fixed top-0 left-0 w-full h-full z-50\"\n            onClick={() => setShowMenu(false)}\n        >  \n\n        </div>\n    }\n\n    return(\n        <nav>\n            <span >\n                <FontAwesomeIcon className=\"self-end\"\n                icon={faBars} \n                onClick={() => setShowMenu(!showMenu)}\n                />\n            </span>\n            {menuMask}\n            {menu}\n        </nav>\n    )\n    \n}\nexport default Navigation","import React from 'react'\nimport Navigation from './Navigation'\n\n\nfunction Header(){\n    return(\n        <header className=\"border-dotted border-4 border-gray-600 font-bold p-5 flex justify-between \">\n        Data Structures Game\n    \n        \n        <Navigation />\n        </header>\n    )   \n}\nexport default Header","import React from 'react'\nimport Header from './Header'\n\nfunction Home(){\n    return(\n        <header className=\"app-header\">\n        \n            \n        </header>\n    )\n}\nexport default Home","//import React from 'react';\nimport React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport Home from './Components/Home'\nimport Header from './Components/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n  {/* <img src={logo} className=\"App-logo\" alt=\"logo\" */}\n            <Header />\n            \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}